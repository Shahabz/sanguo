//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class NotificationManagerWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(NotificationManager), typeof(System.Object));
		L.RegFunction("Register", _Register);
		L.RegFunction("Unregister", Unregister);
		L.RegFunction("ClearAll", ClearAll);
		L.RegFunction("Dispose", Dispose);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Instance", get_Instance, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _Register(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 5);
			NotificationManager obj = (NotificationManager)ToLua.CheckObject(L, 1, typeof(NotificationManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			string arg1 = ToLua.CheckString(L, 3);
			int arg2 = (int)LuaDLL.luaL_checknumber(L, 4);
			bool arg3 = LuaDLL.luaL_checkboolean(L, 5);
			obj.Register(arg0, arg1, arg2, arg3);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Unregister(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			NotificationManager obj = (NotificationManager)ToLua.CheckObject(L, 1, typeof(NotificationManager));
			int arg0 = (int)LuaDLL.luaL_checknumber(L, 2);
			obj.Unregister(arg0);
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ClearAll(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NotificationManager obj = (NotificationManager)ToLua.CheckObject(L, 1, typeof(NotificationManager));
			obj.ClearAll();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Dispose(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			NotificationManager obj = (NotificationManager)ToLua.CheckObject(L, 1, typeof(NotificationManager));
			obj.Dispose();
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Instance(IntPtr L)
	{
		try
		{
			ToLua.PushObject(L, NotificationManager.Instance);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}
}

